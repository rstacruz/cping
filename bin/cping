#!/usr/bin/env node
function App (host) {
  this.host = host;
}

App.prototype.run = function () {
  console.log('\033[2J\033[0;0H');

  function print(left, color, right) {
    console.log(c(color, align(left, -5)) + "   " + right);
  }

  pinger(this.host, function (type, data) {
    if (type === 'ping') {
      var bar = drawBar(data.time, { max: 5000, len: 50 });
      var ms = Math.floor(data.time) + "";
      var color = (data.time < 1000) ? 32 : 31;

      print(ms, color, bar);
    }
    else if (type === 'failed') {
      print("✗", 31, c(30, data.message));
    }
    else if (type === 'error') {
      console.error("ERR: ", data);
    }
  });
};

/**
 * Ping runner
 */

function pinger(host, callback) {
  var bin = 'ping';

  var spawn = require('child_process').spawn;
  var proc = spawn(bin, [ host ], { stdio: 'pipe' });

  function ondata (stream, data) {
    var lines = data.toString().split("\n");
    lines.forEach(function (line) {
      if (line === '') return;

      var m;
      if (m = line.match(/time=([0-9\.]+) ms/)) {
        callback('ping', { time: parseFloat(m[1], 10) });
      }
      else if ((stream === 'err') || (m = line.match(/Request timeout/))) {
        if (line.match(/Request timeout/)) line = 'timeout';
        else line = line.replace(/^ping: (sendto: )?/, '');
        callback('failed', { message: line });
      }
    });
  };

  proc.stdout.on('data', function (data) { ondata('out', data); });
  proc.stderr.on('data', function (data) { ondata('err', data); });
  proc.on('error', function (err) { callback('err', err); });
  proc.on('exit', function (code) { process.exit(code); });
}

/**
 * Bar helper
 */

function drawBar (n, options) {
  var perc = Math.max(0, n / options.max);
  if (options.cap === false) perc = Math.min(1, perc);
  var count = Math.round(perc * options.len);
  var rest = options.len - count;
  var fill = '❘';
  var space = '';
  var str = Array(count+1).join(fill) + Array(rest+1).join(space);
  return str.substr(0, options.len);
}

function align(str, n) {
  var count = Math.abs(n);
  var spaces = Math.max(0, count - str.length);
  var pad = Array(spaces+1).join(" ");

  return (n > 0) ? str+pad : pad+str;
}

function c(color, str) {
  return "\033["+color+"m"+str+"\033[0m";
}

/**
 * Run it
 */

var host = process.argv[2] || '8.8.8.8';
var app = new App(host);
app.run();
