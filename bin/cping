#!/usr/bin/env node
/*
 * Continuous ping
 */

function App (host) {
  this.host = host;
}

App.prototype.run = function () {
  console.log('\033[2J\033[0;0H');

  function print(left, color, right) {
    console.log(c(color, align(left, -5)) + "   " + right);
  }

  Ticker.start();
  pinger(this.host, function (type, data) {
    Ticker.stop();
    var id = data.id;

    if (type === 'ping') {
      var bar = drawBar(data.time, { max: 5000, len: 50 });
      var ms = Math.floor(data.time) + "";
      var color = (data.time < 1000) ? 32 : 31;

      print(ms, color, bar);
    }
    else if (type === 'failed') {
      print("✗", 31, c(31, data.message));
    }
    else if (type === 'err') {
      console.error("ERR: ", data);
    }
    Ticker.start();
  });
};

/**
 * Ping runner
 *
 *    ping('8.8.8.8', function (event, options) {
 *      arguments
 *      //=> [ 'ping', { time: 382.82 } ]
 *      //=> [ 'failed', { message: "request timed out" } ]
 *      //=> [ 'err', "no route to host" ]
 *    })
 */

function pinger(host, callback) {
  var bin = 'ping';

  var spawn = require('child_process').spawn;
  var proc = spawn(bin, [ host ], { stdio: 'pipe' });

  function ondata (stream, data) {
    var lines = data.toString().split("\n");
    lines.forEach(function (line) {
      if (line === '') return;

      var m;

      var seq = (m = line.match(/icmp_seq[= ](\d+)/)) && parseInt(m[1], 10);

      if (m = line.match(/time=([0-9\.]+) ms/)) {
        callback('ping', { time: parseFloat(m[1], 10), id: seq });
      }
      else if ((stream === 'err') || (m = line.match(/Request timeout/))) {
        if (line.match(/Request timeout/)) line = 'timeout';
        else line = line.replace(/^ping: (sendto: )?/, '');
        callback('failed', { message: line.toLowerCase(), id: seq });
      }
    });
  };

  proc.stdout.on('data', function (data) { ondata('out', data); });
  proc.stderr.on('data', function (data) { ondata('err', data); });
  proc.on('error', function (err) { callback('err', err); });
  proc.on('exit', function (code) { process.exit(code); });
}

/**
 * Bar helper
 */

function drawBar (n, options) {
  var perc = Math.max(0, n / options.max);
  if (options.cap === false) perc = Math.min(1, perc);
  var count = Math.round(perc * options.len);
  var rest = options.len - count;
  var fill = '❘';
  var space = '';
  var str = repeat(fill, count) + repeat(space, rest);
  return str.substr(0, options.len);
}

/**
 * Alignment helper
 */

function align(str, n) {
  var count = Math.abs(n);
  var spaces = Math.max(0, count - str.length);
  var pad = repeat(" ", spaces);

  return (n > 0) ? str+pad : pad+str;
}

/**
 * Color helper
 */

function c(color, str) {
  return "\033["+color+"m"+str+"\033[0m";
}

function repeat(str, n) {
  return Array(Math.max(0, 1+n)).join(str);
}

/**
 * Lol
 */

var Ticker = {
  interval: 80,
  i: 0,
  frames: '◜◠◝◞◡◟'.split(''),
  dot: '·',
  maxLength: 20,
  timeout: 2000,

  start: function () {
    var ticker = this;
    this.i = 0;
    ticker.stop();
    ticker.frame();
  },

  frame: function () {
    var ticker = this;
    var char = ticker.frames[ticker.i % ticker.frames.length];
    var count = Math.min(this.maxLength, Math.floor(ticker.i / 2));

    var elapsed = ticker.interval * ticker.i;
    var timeout = elapsed >= ticker.timeout;

    var color = timeout ? 31 : 32;

    var bar = c(timeout ? 31 : 30, repeat(ticker.dot, count));
    ticker.i++;

    process.stdout.write("\033[2K\r" + "    " + c(color, char) + "   " + bar + "\r");
    ticker.id = setTimeout(function () { ticker.frame(); }, ticker.interval);
  },

  stop: function () {
    if (this.id) {
      process.stdout.write("\033[2K\r");
      clearTimeout(this.id);
      delete this.id;
    }
  }
};

/**
 * Run it
 */

var args = process.argv.slice(2).join(' ');
if (args === '-h' || args === '--help') {
  console.log('Usage: cping [HOST]');
} else if (args === '-v' || args === '--version') {
  console.log('v' + require('../package.json').version);
} else {
  var host = args || '8.8.8.8';
  var app = new App(host);
  app.run();
}
